
lcdExample.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000284  000002f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000284  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000306  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f5c  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000869  00000000  00000000  0000135c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000588  00000000  00000000  00001bc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f8  00000000  00000000  00002150  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044b  00000000  00000000  00002248  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000614  00000000  00000000  00002693  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002ca7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e8       	ldi	r30, 0x84	; 132
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <main>
  8e:	0c 94 40 01 	jmp	0x280	; 0x280 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <LCD_send4bits>:
		i++;
	}
}

void LCD_shift_cursor() {
	LCD_sendCmd(CUR_RIGHT_SHFT);
  96:	88 0f       	add	r24, r24
  98:	88 0f       	add	r24, r24
  9a:	8b b9       	out	0x0b, r24	; 11
  9c:	61 11       	cpse	r22, r1
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <LCD_send4bits+0xe>
  a0:	2c 98       	cbi	0x05, 4	; 5
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <LCD_send4bits+0x10>
  a4:	2c 9a       	sbi	0x05, 4	; 5
  a6:	8f e8       	ldi	r24, 0x8F	; 143
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <LCD_send4bits+0x14>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <LCD_send4bits+0x1a>
  b0:	00 00       	nop
  b2:	2b 98       	cbi	0x05, 3	; 5
  b4:	95 e0       	ldi	r25, 0x05	; 5
  b6:	9a 95       	dec	r25
  b8:	f1 f7       	brne	.-4      	; 0xb6 <LCD_send4bits+0x20>
  ba:	00 00       	nop
  bc:	2b 9a       	sbi	0x05, 3	; 5
  be:	85 e0       	ldi	r24, 0x05	; 5
  c0:	8a 95       	dec	r24
  c2:	f1 f7       	brne	.-4      	; 0xc0 <LCD_send4bits+0x2a>
  c4:	00 00       	nop
  c6:	2b 98       	cbi	0x05, 3	; 5
  c8:	8f e8       	ldi	r24, 0x8F	; 143
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <LCD_send4bits+0x36>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <LCD_send4bits+0x3c>
  d2:	00 00       	nop
  d4:	08 95       	ret

000000d6 <LCD_sendCmd>:
  d6:	cf 93       	push	r28
  d8:	c8 2f       	mov	r28, r24
  da:	60 e0       	ldi	r22, 0x00	; 0
  dc:	82 95       	swap	r24
  de:	8f 70       	andi	r24, 0x0F	; 15
  e0:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_send4bits>
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	8c 2f       	mov	r24, r28
  e8:	8f 70       	andi	r24, 0x0F	; 15
  ea:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_send4bits>
  ee:	cf 91       	pop	r28
  f0:	08 95       	ret

000000f2 <LCD_sendData>:
  f2:	cf 93       	push	r28
  f4:	c8 2f       	mov	r28, r24
  f6:	61 e0       	ldi	r22, 0x01	; 1
  f8:	82 95       	swap	r24
  fa:	8f 70       	andi	r24, 0x0F	; 15
  fc:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_send4bits>
 100:	61 e0       	ldi	r22, 0x01	; 1
 102:	8c 2f       	mov	r24, r28
 104:	8f 70       	andi	r24, 0x0F	; 15
 106:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_send4bits>
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <LCD_Init>:
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	84 b9       	out	0x04, r24	; 4
 112:	8a b9       	out	0x0a, r24	; 10
 114:	8f e1       	ldi	r24, 0x1F	; 31
 116:	9e e4       	ldi	r25, 0x4E	; 78
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <LCD_Init+0xa>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <LCD_Init+0x10>
 11e:	00 00       	nop
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	83 e0       	ldi	r24, 0x03	; 3
 124:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_send4bits>
 128:	8f e1       	ldi	r24, 0x1F	; 31
 12a:	9e e4       	ldi	r25, 0x4E	; 78
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <LCD_Init+0x1e>
 130:	00 c0       	rjmp	.+0      	; 0x132 <LCD_Init+0x24>
 132:	00 00       	nop
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	83 e0       	ldi	r24, 0x03	; 3
 138:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_send4bits>
 13c:	8f e3       	ldi	r24, 0x3F	; 63
 13e:	9c e9       	ldi	r25, 0x9C	; 156
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <LCD_Init+0x32>
 144:	00 c0       	rjmp	.+0      	; 0x146 <LCD_Init+0x38>
 146:	00 00       	nop
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_send4bits>
 150:	8f e8       	ldi	r24, 0x8F	; 143
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <LCD_Init+0x46>
 158:	00 c0       	rjmp	.+0      	; 0x15a <LCD_Init+0x4c>
 15a:	00 00       	nop
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_send4bits>
 164:	8f e8       	ldi	r24, 0x8F	; 143
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <LCD_Init+0x5a>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <LCD_Init+0x60>
 16e:	00 00       	nop
 170:	88 e2       	ldi	r24, 0x28	; 40
 172:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_sendCmd>
 176:	84 e0       	ldi	r24, 0x04	; 4
 178:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_sendCmd>
 17c:	8f e0       	ldi	r24, 0x0F	; 15
 17e:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_sendCmd>
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_sendCmd>
 188:	8f e3       	ldi	r24, 0x3F	; 63
 18a:	9f e1       	ldi	r25, 0x1F	; 31
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <LCD_Init+0x7e>
 190:	00 c0       	rjmp	.+0      	; 0x192 <LCD_Init+0x84>
 192:	00 00       	nop
 194:	08 95       	ret

00000196 <LCD_print>:
 196:	0f 93       	push	r16
 198:	1f 93       	push	r17
 19a:	cf 93       	push	r28
 19c:	fc 01       	movw	r30, r24
 19e:	80 81       	ld	r24, Z
 1a0:	88 23       	and	r24, r24
 1a2:	59 f0       	breq	.+22     	; 0x1ba <LCD_print+0x24>
 1a4:	8f 01       	movw	r16, r30
 1a6:	c0 e0       	ldi	r28, 0x00	; 0
 1a8:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_sendData>
 1ac:	cf 5f       	subi	r28, 0xFF	; 255
 1ae:	f8 01       	movw	r30, r16
 1b0:	ec 0f       	add	r30, r28
 1b2:	f1 1d       	adc	r31, r1
 1b4:	80 81       	ld	r24, Z
 1b6:	81 11       	cpse	r24, r1
 1b8:	f7 cf       	rjmp	.-18     	; 0x1a8 <LCD_print+0x12>
 1ba:	cf 91       	pop	r28
 1bc:	1f 91       	pop	r17
 1be:	0f 91       	pop	r16
 1c0:	08 95       	ret

000001c2 <LCD_setCursor>:
}

void LCD_setCursor(uint8_t col, uint8_t row) {
	if(row == 0) {
 1c2:	61 11       	cpse	r22, r1
 1c4:	04 c0       	rjmp	.+8      	; 0x1ce <LCD_setCursor+0xc>
		LCD_sendCmd(128 + col);
 1c6:	80 58       	subi	r24, 0x80	; 128
 1c8:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_sendCmd>
 1cc:	08 95       	ret
	} else {
		LCD_sendCmd(192 + col);
 1ce:	80 54       	subi	r24, 0x40	; 64
 1d0:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_sendCmd>
 1d4:	08 95       	ret

000001d6 <main>:
#include <util/delay.h>
#include "LCD.h"

int main(void)
{
    LCD_Init();
 1d6:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_Init>
	LCD_setCursor(5, 0);
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	85 e0       	ldi	r24, 0x05	; 5
 1de:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_setCursor>
	LCD_print("hello");
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ea:	2f ef       	ldi	r18, 0xFF	; 255
 1ec:	83 ed       	ldi	r24, 0xD3	; 211
 1ee:	90 e3       	ldi	r25, 0x30	; 48
 1f0:	21 50       	subi	r18, 0x01	; 1
 1f2:	80 40       	sbci	r24, 0x00	; 0
 1f4:	90 40       	sbci	r25, 0x00	; 0
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <main+0x1a>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <main+0x24>
 1fa:	00 00       	nop
	_delay_ms(1000);
	//LCD_autoscroll();
	LCD_print("w");
 1fc:	86 e0       	ldi	r24, 0x06	; 6
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_print>
 204:	2f ef       	ldi	r18, 0xFF	; 255
 206:	83 ed       	ldi	r24, 0xD3	; 211
 208:	90 e3       	ldi	r25, 0x30	; 48
 20a:	21 50       	subi	r18, 0x01	; 1
 20c:	80 40       	sbci	r24, 0x00	; 0
 20e:	90 40       	sbci	r25, 0x00	; 0
 210:	e1 f7       	brne	.-8      	; 0x20a <main+0x34>
 212:	00 c0       	rjmp	.+0      	; 0x214 <main+0x3e>
 214:	00 00       	nop
	_delay_ms(1000);
	LCD_print("o");
 216:	84 e0       	ldi	r24, 0x04	; 4
 218:	91 e0       	ldi	r25, 0x01	; 1
 21a:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_print>
 21e:	2f ef       	ldi	r18, 0xFF	; 255
 220:	83 ed       	ldi	r24, 0xD3	; 211
 222:	90 e3       	ldi	r25, 0x30	; 48
 224:	21 50       	subi	r18, 0x01	; 1
 226:	80 40       	sbci	r24, 0x00	; 0
 228:	90 40       	sbci	r25, 0x00	; 0
 22a:	e1 f7       	brne	.-8      	; 0x224 <main+0x4e>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <main+0x58>
 22e:	00 00       	nop
	_delay_ms(1000);
	LCD_print("r");
 230:	88 e0       	ldi	r24, 0x08	; 8
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_print>
 238:	2f ef       	ldi	r18, 0xFF	; 255
 23a:	83 ed       	ldi	r24, 0xD3	; 211
 23c:	90 e3       	ldi	r25, 0x30	; 48
 23e:	21 50       	subi	r18, 0x01	; 1
 240:	80 40       	sbci	r24, 0x00	; 0
 242:	90 40       	sbci	r25, 0x00	; 0
 244:	e1 f7       	brne	.-8      	; 0x23e <main+0x68>
 246:	00 c0       	rjmp	.+0      	; 0x248 <main+0x72>
 248:	00 00       	nop
	_delay_ms(1000);
	LCD_print("l");
 24a:	8a e0       	ldi	r24, 0x0A	; 10
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_print>
 252:	2f ef       	ldi	r18, 0xFF	; 255
 254:	83 ed       	ldi	r24, 0xD3	; 211
 256:	90 e3       	ldi	r25, 0x30	; 48
 258:	21 50       	subi	r18, 0x01	; 1
 25a:	80 40       	sbci	r24, 0x00	; 0
 25c:	90 40       	sbci	r25, 0x00	; 0
 25e:	e1 f7       	brne	.-8      	; 0x258 <main+0x82>
 260:	00 c0       	rjmp	.+0      	; 0x262 <main+0x8c>
 262:	00 00       	nop
	_delay_ms(1000);
	LCD_print("d");
 264:	8c e0       	ldi	r24, 0x0C	; 12
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_print>
 26c:	2f ef       	ldi	r18, 0xFF	; 255
 26e:	83 ed       	ldi	r24, 0xD3	; 211
 270:	90 e3       	ldi	r25, 0x30	; 48
 272:	21 50       	subi	r18, 0x01	; 1
 274:	80 40       	sbci	r24, 0x00	; 0
 276:	90 40       	sbci	r25, 0x00	; 0
 278:	e1 f7       	brne	.-8      	; 0x272 <main+0x9c>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <main+0xa6>
 27c:	00 00       	nop
 27e:	ff cf       	rjmp	.-2      	; 0x27e <main+0xa8>

00000280 <_exit>:
 280:	f8 94       	cli

00000282 <__stop_program>:
 282:	ff cf       	rjmp	.-2      	; 0x282 <__stop_program>
